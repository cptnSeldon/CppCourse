#pragma region Slides
    #pragma region In Out
/*
        -----------------------------------------------------------
        cin >>              : extract stream                    p16
        cout <<             : insert  stream
        endl;               : end of line
        -----------------------------------------------------------
        << dec <<           : base change                       p18
        << oct <<           : base change
        << hex <<           : base change
        << [no]uppercase << : upper/lower case
        << [no]showpos <<   : show +
        << boolalpha <<     : show boolean

        example : cout << hex << showpos << n << endl;
        -----------------------------------------------------------
        setprecision(int)   : set decimal precision             p19
        setw(int)           : set character number
        setfill(char)       : set filler (character)
        -----------------------------------------------------------
        >>                  : setting + test                    p20

        example : if ((cin >> n) == 0) cout << "fail" << endl;
        -----------------------------------------------------------
        istream& ignore (streamsize n = 1, int delim = EOF);    p21
            : reset in- buffer -> #include <limits>
        -----------------------------------------------------------
        cin.fail()          : in stream fail                    p22
        cin.clear()         : reset control bit - OK
        cin.eof()           : end in stream
        example :
            while ( !(cin >> n) || n < 1 || n > 6)
            {
                if (cin.fail())
                {
                    cout << "Incorrect input" << endl;
                    cin.clear;
                    cin.ignore(256, '\n');
                }
                else
                {
                    cout << "Invalid number" << endl;
                }
            }
*/
#pragma endregion In Out
    #pragma region Parameters
    /*
        -----------------------------------------------------------
            VALUE                                               p26
                void function(int n) {..}
                function(n);
            POINTER - ADDRESS
                void function(int * n) {..}
                function(&n);
            REFERENCE - ADDRESS -> managed by compiler
                void function(int & n) {..}
                function(n)
            REFERENCE ON A CONST
                void function(const int & n) {..}
                function(n);
        -----------------------------------------------------------
        example :
            void swap(int & a, int & b)
            {
                int t;
                t = a; a = b; b = t;
            }
        -----------------------------------------------------------
        example :
            int x;
            int & function() { return x; }
            int main()
            {
                x = 100;
                /// 100
                function() = 200
                /// 200
            }
    */
    #pragma endregion Parameters
    #pragma region Override
    /*
        -----------------------------------------------------------
        int function(int a, int b);
        int function(int a, int b, int c);
        -----------------------------------------------------------
    */
    #pragma endregion Override
    #pragma region Dynamic Allocation
    /*
        -----------------------------------------------------------
        new type    =>      malloc(sizeof(type))

        double * ptr;
        ptr = new double;
        delete ptr;
        -----------------------------------------------------------
        int * tab = nullptr;
        tab = new int[10];
        delete []tab;
        -----------------------------------------------------------
        Fail handling : std::bad_alloc
        > new (std::nothrow) int[1024]; -> nothrow returns a nullptr
        > if (ptr == nullptr) {..}
    */
    #pragma endregion Dynamic Allocation
    #pragma region String
    /*
        -----------------------------------------------------------
        - safer than char *
        - auto/dynamic management of array size
        - = + += << >> [] operators
        - management and manipulation by using :
            size(), capacity(), find(), erase(), insert()
        - #include <string>
    */
    #pragma endregion String
    #pragma region Misc
    /*
        C :     #define MAX (x,y) ( (x) > y ) ? (x) : (y))
        C++ :   inline int max(int x, int y) { return x > y ? < : y; }
        -----------------------------------------------------------
        C++11
            auto

            alignas - alignof
            char16_t - char32_t
            constexpr
            decltype -> iterators + templates
            noexcept
            nullptr
            static_assert
            thread_local
        -----------------------------------------------------------
    */
    #pragma endregion Misc
#pragma endregion Slides
